/* ------------------------------------------------------------------------
 IQ Zero (fka Wurm)
 Procedurally-Generated Genetic Algorithm Autonomous Micro Robot
 For ATTiny85 and the Arduino environment
 Winner of the Adafruit/Hackaday Pi Zero Contest!
 2016 @diemastermonkey (with special thanks to Charles 'Chucky D' Darwin)   
 ------------------------------------------------------------------------
 */

/* ------------------------------------------------------------------------
 Memo
 
 v 0.09  Greatly simplified, miniature fitness test in main loop
         Operable as moving to a new faster model. Only one field enabled,
         actions peeled directly off PRNG. You'd think it would do nothing, but
         selection still manages to find productive combinations. 
 
 v 0.08  Finally a bit more wieldy GA structure. Greatly simplified 
 'internal logic', only a simple test cycle implemented.
 
 Next: Increased emphasis on curves (retreating to Karl Simms?) - 
 because I want to explore possible "toy" applications.
 
 v 0.06  Completely refactored! Timer-based (not step-based) test cycle,
 fewer activities in mainline, fewer prng accesses, LESS flexibility for
 fields and mutations, but safer.
 ------------------------------------------------------------------------
 Serving Suggestion/Example Circuit
                                                    Ground/power not shown
                                                    
  Ground ----  Gnd  |ATTiny85| Pin 0 ----- Signal | Servo 1 
                    |        | Pin 1 ----- Signal | Passive Infrared Sensor
                    |        | Pin 2 ----- Signal | Servo 2 (or other)
                    |        | Pin 3 ----- Pwr    | LED
  3.5v   ----  Pwr  |        | Pin 4 ----- Signal | Contact Switch
  
 ------------------------------------------------------------------------ 
 */
 
 
 
/* ------------------------------------------------------------------------
 Tuning
 ------------------------------------------------------------------------
 */
int iZooTotal = 4;                // Total GAs in population
long lRandMax = 2048;              // Range of most rand outs
unsigned long lRunTimeMS =  6000;  // Lifetime of each GA in ms
// Set bonus (or penalty!) for physical world events
int iServoCost = 1;               // Cost (from bonus) of writing to servo
int iSensorReward = +10;
int iContactReward = -40;          // Example penalty for triggering contact
long iRootSeed = 6307;          // Initial PRNG starting point

/* ------------------------------------------------------------------------
 GA Structure
 NOTE: Populate in def *mandatory* or death @ runtime. Srsly!
 ------------------------------------------------------------------------
 */
typedef struct GAStruct {
  // Basic DNA
  unsigned long Seed = 0;
  unsigned long Length = 0;
  long Limit = 0;  
  long OutPin = 0;
  long InPin = 0;    
  long OutValue = 0;
  long InValue = 0;  
  long Curve = 0;  
  long Score = 0;
};

GAStruct* GA[16];      // The zoo

/* ------------------------------------------------------------------------
 Globals
 ------------------------------------------------------------------------
 */
// Pins available to the GA
int iPins[] = {0, 1, 2, 3, 4, A1, A2, A3};
int iPinsTotal = 8;              // Fast access
int iLedPin = 3;
int iSensorPin = 1;               // Currently a PIR (DIGITAL) sends high while motion
int iSensorLast = 0;              // Most recent reading from sensor
int iContactPin = 4;              // Trigger switch or contact sensor pin
int iServoPin = 0;                // For normalization only, GA must discover what's what
// Runtime
unsigned long lLastTimeMS = 0;    // When (sys run time) current test ends
unsigned long lNowTimeMS = 0;
int iZooIndex = 0;                // Index of GA under test now
int iHighScore = 0;
int iHighScoreIndex = 0;
int iPin = 0;
int g; 
int i;

/* ------------------------------------------------------------------------
 Run-Once Setup
 ------------------------------------------------------------------------
 */
void setup () {
  fnHardwareTest ();
  // First generation
  randomSeed (iRootSeed + analogRead (A3));
  for (i=0; i < iZooTotal; i++) {
    fnFlash (1, 1000);        
    fnMutate(i);
    // GA[i]->Length = 32;    // Force reasonable length
    GA[i]->Score = 0;
  }

  iZooIndex = 0;
  iHighScore = 0;                      // Set for first run  
  randomSeed(GA[iZooIndex]->Seed);  
  lLastTimeMS = millis();  
}

/* ------------------------------------------------------------------------
 Main
 ------------------------------------------------------------------------
 */
void loop () {
  
  // Output
  // iPin = abs(GA[iZooIndex]->OutPin) % iPinsTotal;    // Limit to range of pins            
  iPin = random(lRandMax) % iPinsTotal;    // Limit to range of pins              
  
  // Treat digital pins as servo
  if (iPin < 5) {
    GA[iZooIndex]->Score -= iServoCost;    // Charge for servo action
    g = random(lRandMax);    
    pinMode (iPins[iPin], OUTPUT);                 
    digitalWrite (iPins[iPin], HIGH);
    delayMicroseconds (g);
    digitalWrite (iPins[iPin], LOW);     
    delayMicroseconds (g);    
  } else {
    // Analog pins
    pinMode (iPins[iPin], OUTPUT);                 
    analogWrite (iPins[iPin], GA[iZooIndex]->OutValue);
  }
  
  // Scoring
  pinMode (iSensorPin, INPUT);    // PIR reward or penalty
  if (digitalRead (iSensorPin) == HIGH) {
    GA[i]->Score += iSensorReward;        
    pinMode (iLedPin, OUTPUT);    // LED on for info
    digitalWrite (iLedPin, HIGH);        
  } else {
    pinMode (iLedPin, OUTPUT);    // LED off for info
    digitalWrite (iLedPin, LOW);                
  }      
  
  pinMode (iContactPin, INPUT);   // Contact switch reward or penalty
  if (digitalRead (iContactPin) == HIGH) {
    GA[iZooIndex]->Score += iContactReward;        
  }      
  
  // This GA test run time up
  if (millis() - lLastTimeMS > lRunTimeMS) {      
    delay(3);              
    fnFlash (iZooIndex + 1, 1000);    
    delay(3);          
    
    // Rank if highest so far
    if (GA[iZooIndex]->Score > iHighScore) {
      iHighScore = GA[iZooIndex]->Score;
      iHighScoreIndex = iZooIndex;
    }

    // Go to next GA
    iZooIndex++;
    // ...or handle generation    
    if (iZooIndex > iZooTotal) {        
      // Clone winner, spawn mutant siblings
      fnFlash (iHighScoreIndex + 1, 5000);
      fnClone (iHighScoreIndex);
      for (i=1; i < iZooTotal; i++) {    // Winner unchanged
        fnMutate(i);
      }        
      iZooIndex = 0;                    // Wraparound zoo
      iHighScore = 0;                   // Reset high
    } 
    // Set for next testee
    randomSeed(GA[iZooIndex]->Seed);      
    lLastTimeMS = millis();
  }  // End if time up
}

/* ------------------------------------------------------------------------
 fnMutate : Mutate (arg) GA (by index) - Re-seeds PRNG
 ------------------------------------------------------------------------
 */
void fnMutate (int iArgIndex) {
  randomSeed (iRootSeed + analogRead (A3));
  // Smudges  
  if (int(random(2)) == 0)   
    GA[iArgIndex]->Seed += int(random(3)) - 1;    
  if (int(random(2)) == 0)       
    GA[iArgIndex]->Length += int(random(3)) - 1;
  if (int(random(2)) == 0)       
    GA[iArgIndex]->Limit += int(random(3)) - 1;
  if (int(random(2)) == 0)     
    GA[iArgIndex]->OutPin += int(random(3)) - 1;
  if (int(random(2)) == 0)       
    GA[iArgIndex]->InPin += int(random(3)) - 1;
  
  // Major changes, less common
  if (int(random(10)) == 0) 
    GA[iArgIndex]->Seed = random (lRandMax);  
  if (int(random(10)) == 0) 
    GA[iArgIndex]->Length = random (lRandMax);  
  if (int(random(10)) == 0) 
    GA[iArgIndex]->Limit = random (lRandMax);  
  if (int(random(10)) == 0) 
    GA[iArgIndex]->OutPin = random (lRandMax);  
  if (int(random(10)) == 0) 
    GA[iArgIndex]->InPin = random (lRandMax);  

  // GA[iArgIndex]->Curve = random (lRandMax);        
}

/* ------------------------------------------------------------------------
 fnClone : Copy arg1 GA into all other "cages"
 ------------------------------------------------------------------------
 */
void fnClone (int iArgIndex) {
  for (i=0; i < iZooTotal; i++) {
    if (i != iArgIndex) {          // Superfluous
      GA[i]->Seed = GA[iArgIndex]->Seed;
      GA[i]->Length = GA[iArgIndex]->Length;
      GA[i]->Limit = GA[iArgIndex]->Limit;    
      GA[i]->OutPin = GA[iArgIndex]->OutPin;    
      GA[i]->InPin = GA[iArgIndex]->InPin;    
      GA[i]->Curve = GA[iArgIndex]->Curve;          
    }
  }
}

/* ------------------------------------------------------------------------
 fnFlash : Simple flasher
 ------------------------------------------------------------------------
 */
void fnFlash (int iTimes, float iDelaySeconds) {
  if (iTimes < 1) { 
    return; 
  }
  pinMode (iLedPin, OUTPUT);  
  digitalWrite (iLedPin, LOW);      // Start off
  // delayMicroseconds (iDelay);  
  for (int i=0; i < iTimes; i++) {
    digitalWrite (iLedPin, HIGH);
    delayMicroseconds (iDelaySeconds);
    digitalWrite (iLedPin, LOW);
    delayMicroseconds (iDelaySeconds);
  }
}

/* ------------------------------------------------------------------------
   fnHardwareTest : Quick blind hardware test for startup etc
   ------------------------------------------------------------------------
*/
void fnHardwareTest () {
  for (int i=0; i < 5; i++) {
    pinMode(i, OUTPUT);
    for (int s=0; s < 280; s += 20) {
      digitalWrite (i, HIGH);
      delayMicroseconds (s);
      digitalWrite (i, LOW);
      delayMicroseconds (20000);
    }  
    digitalWrite (i, HIGH);
    delayMicroseconds (90);
    digitalWrite (i, LOW);
    delayMicroseconds (20000);    
  }  
}
